exception(예외)

발생시점
(1) 컴파일 에러 : 컴파일 시에 발생하는 에러
(2)런타임 에러: 실행 시에 발생하는 에러
            (1)error : 메모리 부족, 스택오버플로우
            (2)exception : 수습 가능


      Object (조상)
        |             
        |
     Throwable
        |
|---------------------------------------------------------|
exception                                               error
   |IOException
   |ClassNotFoundException
   |RuntimeException
        |--ArithmeticException 0으로 나눌 때 뜸.
        |--NullPointerException
    

exception 처리
1) try ~ catch 문

try{
    예외가 발생할 가능성이 있는 문장
} catch(Exception ex){
    Exception 발생시 처리하기 위한 문장
}

catch(Exception ex){
    Exception 발생시 처리하기 위한 문장
}

.. catch 다중 가능.

catch 문 작성 시 multi 블럭 가능

 try {
            System.out.println(arr[0]);
            int num = 100 / 0; // Arithmetic_Exception

        } catch (ArrayIndexOutOfBoundsException | ArithmeticException e) {
            System.out.println("오류 발생.");
            
        }


2) try ~ catch ~ finally
finally block : 예외 발생여부와 상관없이 반드시 실행되어야 할 코드 작성
                ex) 리소스(입출력스트림, 소켓..) close() 호출 - sc.close()

3)예외 강제 발생 - Exception class 
throw new Exception(" ")


4) 예외를 전달
   throws Exception;

try~with~resources : 자동 리소스 닫기
 + finally 에서 주로 자원닫기 구문 실행 => 자바 버전 1.7 부터 자동 닫기 지원
  finally 로 개발자가 자원 닫기를 직접 명시하지 않아도 됨.
  
  try (자동으로 닫아야 하는 객체 생성){

  } catch{

  }
