스트림
 - 컬렉션(배열 포함)의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 도와주는 반복자
 - (명시하지 않아도) 내부 반복자 사용 <>  loop... 외부 반복자
 - 중간 처리(매핑, 필터링, 정렬)와 최종 처리(반복, 카운트, 합계) 가능
 - 한번 소비되면 재 생성해야 한다. (한번하고 끝.)

--중간처리 
 1) filter() : 조건 필터링
 2)distinct() : 중복 제거
 3)map(Function<T, R> mapper) : 스트림의 요소를 변환
     mapToInt(ToIntFunction<? super T> mapper) : R 타입이 int
     mapToLong(ToLongFunction<? super T> mapper) : R 타입이 long    
    mapToDouble(ToDoubleFunction<? super T> mapper) : R 타입이 double
  4) skip() : 스트림의 일부를 잘라날 때 사용
  5)limit() : 스트림의 일부를 잘라날 때 사용
  6)peek() : 중간 연산 확인 


 --최종처리
  1) forEach() :
  2)collect() :
 3) count() / sum() / max() / min()

 --Optional<T>
 - 최종 연산의 결과를 Optional 객체에 담아서 반환
 - 반환된 결과가 null 인지 매번 if문으로 체크하는 대신 Optional에 정의된
   메서드를 통해서 간단히 처리할 수 있다.
 - null 일 때 반환값 지정 : orElse()
 - null 일 때 false, 아닐 때 true: isPresent()
 - null 일 때 아무 일도 안함, 아닐 때 람다식 실행: ifPresent(Consumer)
 
 OptionalDouble
 OptionalInt